var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":""},{"location":"index.html#p5fip-fast-image-processing","title":"p5.FIP (Fast Image Processing)","text":"<p>Real-time image processing library for p5.js.</p> <p>\u65e5\u672c\u8a9e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3002</p>"},{"location":"index.html#what-is-it","title":"What is it?","text":"<p>p5.FIP is a library that allows you to add image processing/post-processing effects to your p5.js sketch. In 5 lines of code you can add effects like bloom, glitching, cartoon shading and many more.</p> <p>Left and right arrow keys cycle filters, up and down arrow keys cycle images.</p>"},{"location":"index.html#features","title":"Features","text":"<ul> <li>44 Effects</li> <li>Hardware Accelerated</li> <li>Documented</li> </ul>"},{"location":"index.html#getting-started","title":"Getting Started","text":"<p>To use p5.FIP you can include it in your index.html file: <pre><code>    &lt;head&gt;\n    &lt;!-- ...--&gt;\n    &lt;script src=\"https://prontopablo.github.io/p5.FIP/assets/javascripts/p5.FIP.js\"&gt;&lt;/script&gt;\n    &lt;!-- ...--&gt;\n    &lt;/head&gt;\n</code></pre> Alternatively you can download the p5.FIP.js file from releases and bring it into your project files: <pre><code>    &lt;head&gt;\n    &lt;!-- ...--&gt;\n    &lt;script src=\"p5.FIP.js\"&gt;&lt;/script&gt;\n    &lt;!-- ...--&gt;\n    &lt;/head&gt;\n</code></pre></p> <p>The reference for each shader can be found in the sidebar of this website.</p>"},{"location":"index.html#examples","title":"Examples","text":"<p>Example sketches can be found in this collection here and they are also included in the examples folder on GitHub. </p>"},{"location":"index.html#p5js-library-guidelines","title":"p5.js Library Guidelines","text":"<p>In accordance with the p5.js library guidelines:</p> <ol> <li>p5.FIP has no dependencies.</li> <li>Examples are included.</li> <li>p5.FIP is open source. Source Code.</li> <li>Keywords: image-processing, post-processing, filters.</li> <li>Last update: 03/02/25.</li> </ol>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>I welcome contributions from the community to make p5.FIP better. If you have any suggestions, bug fixes, or new features to add, feel free to create a pull request.</p>"},{"location":"index.html#acknowledgments","title":"Acknowledgments","text":"<p>Many of these shaders were adapted from existing solutions in other programming languages, in these cases, the links to the original shaders or tutorials followed can be found at the top of each shader.</p> <p>A list of existing Processing image processing libraries can be found here.</p>"},{"location":"antiAliasing.html","title":"Anti-aliasing","text":"<p>Performs basic anti-aliasing using a 2x2 super-sampling technique. Takes four samples per pixel and averages them to smooth out edges.</p>"},{"location":"antiAliasing.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>strength</code> Float: Controls the size of the offset for super-sampling. Larger values result in stronger anti-aliasing. Default: <code>0.0</code> </p>"},{"location":"antiAliasing.html#example","title":"Example","text":"<pre><code>let bird, antiAliasing;\n\nfunction setup() {\n  createCanvas(600, 600, WEBGL); // Use WEBGL mode to use the shader\n  antiAliasing = createFilterShader(fip.antiAliasing); // Load the shader\n  bird = loadImage(\"bird.jpg\");\n}\n\nfunction draw() {\n  background(0);\n  imageMode(CENTER);\n  image(bird, 0, 0, width, height);\n\n  // Apply the shader\n  filter(antiAliasing);\n\n  // Set the shader uniforms\n  antiAliasing.setUniform('strength', 0.9);\n}\n</code></pre>"},{"location":"bilateral.html","title":"Bilateral","text":"<p>Blurs while preserving edges based on spatial and intensity (color) differences.</p>"},{"location":"bilateral.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>sigmaSpace</code> Float: Spatial standard deviation for calculating spatial differences. Default: <code>0.0</code> <code>sigmaColor</code> Float: Intensity (color) standard deviation for calculating color differences. Default: <code>0.0</code></p>"},{"location":"bilateral.html#example","title":"Example","text":"<pre><code>let bird, bilateral;\n\nfunction setup() {\n  createCanvas(600, 600, WEBGL); // Use WEBGL mode to use the shader\n  bilateral = createFilterShader(fip.bilateral); // Load the shader\n  bird = loadImage(\"bird.jpg\");\n}\n\nfunction draw() {\n  background(0);\n  imageMode(CENTER);\n  image(bird, 0, 0, width, height);\n\n  // Apply the shader\n  filter(bilateral);\n\n  // Set the shader uniforms\n  bilateral.setUniform('sigmaSpace', 1.0);\n  bilateral.setUniform('sigmaColor', 0.8);\n}\n</code></pre> <p>Note: The rest of the reference pages from here on out simply list sample parameter values, not an entire sketch like below. You can copy/paste the sample values from other filters into this example.</p>"},{"location":"blend.html","title":"Blend","text":"<p>Blends textures together based on a mix factor and blending type.</p>"},{"location":"blend.html#parameters","title":"Parameters","text":"<p><code>texture1</code> Texture: The first texture to be blended. Default: <code>undefined</code> <code>texture2</code> Texture: The second texture to be blended. Default: <code>undefined</code> <code>uTextureSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>(0.0, 0.0)</code> <code>mixFactor</code> Float: How much weight to give each picture in the blending. A value of 0.0 only outputs texture1, 1.0 only outputs texture2. Default: <code>0.0</code> <code>blendingMode</code> Int: Which blending mode to use. Below is a table of the values and their respective blend modes. Default: <code>0.0</code></p> blendingMode Blend Mode 1 Additive Blending 2 Subtract Blending 3 Multiplicative Blending 4 Screen Blending 5 Overlay Blending 6 Darken Blending 7 Lighten Blending 8 Difference Blending 9 Exclusion Blending 10 Behind Blending 11 Dissolve Blending 12 Hue Blending 13 Normal Blending Default Linear Interpolation"},{"location":"blend.html#example","title":"Example","text":"<pre><code>let layer1, layer2, ireland, bird, blend, blendingModeIndex = 0;\n\nfunction setup() {\n    createCanvas(600, 600, WEBGL); // Enable WEBGL mode for shaders\n\n    blend = createFilterShader(fip.blend); // Load the blend shader\n\n    ireland = loadImage(\"ireland.jpg\");\n    bird = loadImage(\"bird.jpg\");\n\n    // Create 2 framebuffers so we can control which textures are sent to the shaders\n    layer1 = createFramebuffer();\n    layer2 = createFramebuffer();\n\n    console.log(\"Press any key to cycle through blending modes.\");\n}\n\nfunction draw() {\n    background(0);\n    imageMode(CENTER);\n\n    layer1.begin();\n    image(ireland, 0, 0, width, height);\n    layer1.end();\n\n    layer2.begin();\n    image(bird, 0, 0, width, height);\n    layer2.end();\n\n    // Apply the blend shader\n    filter(blend);\n\n    // Send our two textures to the shader\n    blend.setUniform('texture1', layer1.color);\n    blend.setUniform('texture2', layer2.color);\n    blend.setUniform(\"uTextureSize\", [width, height]);\n    blend.setUniform('mixFactor', 0.5);\n    blend.setUniform('blendingMode', blendingModeIndex);\n}\n\nfunction keyPressed() {\n    // Cycle through blending modes when a key is pressed\n    blendingModeIndex = (blendingModeIndex + 1) % 14; // 14 types of blending\n    console.log(\"Blending Mode: \" + blendingModeIndex);\n}\n</code></pre> Images to be blended Blended image"},{"location":"bloom.html","title":"Bloom","text":"<p>Adds a glow effect using a combination of blurring and blending techniques.</p>"},{"location":"bloom.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>intensity</code> Float: The strength of the glow effect. A higher value intensifies the glow. Default: <code>0.0</code> <code>glow</code> Float: The extent of the glow, controlled by the blur radius. Should be within the range [0.0, 8.0]. Default: <code>0.0</code></p>"},{"location":"bloom.html#example-parameters","title":"Example Parameters","text":"<pre><code>bloom.setUniform('intensity', 0.8);\nbloom.setUniform('glow', 1.0);\n</code></pre>"},{"location":"boxBlur.html","title":"Box Blur","text":"<p>Blurs using a simple box blur algorithm.</p>"},{"location":"boxBlur.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>blurRadius</code> Int: The radius of the box blur. Controls the extent of blurring. Default: <code>0</code></p>"},{"location":"boxBlur.html#example-parameters","title":"Example Parameters","text":"<pre><code>boxBlur.setUniform('blurRadius', 3);\n</code></pre>"},{"location":"brightness.html","title":"Brightness","text":"<p>Adjusts the brightness.</p>"},{"location":"brightness.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>brightness</code> Float: The factor by which to adjust the brightness. A value less than 1.0 darkens the image, while a value greater than 1.0 brightens it. Default: <code>0.0</code></p>"},{"location":"brightness.html#example-parameters","title":"Example Parameters","text":"<pre><code>brightness.setUniform('brightness', 2.1);\n</code></pre>"},{"location":"cannyEdgeDetection.html","title":"Canny Edge Detection","text":"<p>Detects edges using the Canny edge detection algorithm.</p>"},{"location":"cannyEdgeDetection.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>thresholdLow</code> Float: The lower threshold for edge detection. Pixels with intensity gradients below this threshold will be suppressed. Default: <code>0.0</code> <code>thresholdHigh</code> Float: The higher threshold for edge detection. Pixels with intensity gradients above this threshold will be considered strong edges. Default: <code>0.0</code></p>"},{"location":"cannyEdgeDetection.html#example-parameters","title":"Example Parameters","text":"<pre><code>cannyEdgeDetection.setUniform('thresholdLow', 0.1);\ncannyEdgeDetection.setUniform('thresholdHigh', 0.3);\n</code></pre>"},{"location":"cartoon.html","title":"Cartoon","text":"<p>Adds a cartoon effect by emphasizing edges and darkening them.</p>"},{"location":"cartoon.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>edgeThreshold</code> Float: The threshold value that determines whether a pixel is considered an edge pixel based on the difference between the center pixel and its neighbors. Default: <code>0.0</code></p>"},{"location":"cartoon.html#example-parameters","title":"Example Parameters","text":"<pre><code>cartoon.setUniform('edgeThreshold', 0.1);\n</code></pre>"},{"location":"contrast.html","title":"Contrast","text":"<p>Adjusts the contrast.</p>"},{"location":"contrast.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>contrast</code> Float: The contrast adjustment factor. A value of 1.0 leaves the contrast unchanged, while higher values increase contrast, and lower values decrease contrast. Default: <code>0.0</code></p>"},{"location":"contrast.html#example-parameters","title":"Example Parameters","text":"<pre><code>contrast.setUniform('contrast', 2.0);\n</code></pre>"},{"location":"crt.html","title":"CRT","text":"<p>Recreates the effects of an old CRT television with visible scanlines, spherical warping, and vignette.</p>"},{"location":"crt.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>time</code> Float: Time used to animate the scanlines. Default: <code>0.0</code></p>"},{"location":"crt.html#example-parameters","title":"Example Parameters","text":"<pre><code>crt.setUniform('time', millis() * 0.001);\n</code></pre>"},{"location":"deform.html","title":"Deform","text":"<p>Uses sine waves to deform.</p>"},{"location":"deform.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>deformationAmount</code> Float: The amount of deformation to apply based on a sine wave. Default: <code>0.0</code></p>"},{"location":"deform.html#example-parameters","title":"Example Parameters","text":"<pre><code>deform.setUniform('deformationAmount', 0.1);\n</code></pre>"},{"location":"differenceOfGaussian.html","title":"Difference of Gaussian","text":"<p>Applies two Gaussian blurs to the input texture and calculates the Difference of Gaussian.</p>"},{"location":"differenceOfGaussian.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>radius1</code> Float: The radius of the first Gaussian blur. Default: <code>0.0</code> <code>radius2</code> Float: The radius of the second Gaussian blur. Default: <code>0.0</code></p>"},{"location":"differenceOfGaussian.html#example-parameters","title":"Example Parameters","text":"<pre><code>differenceOfGaussian.setUniform('radius1', 1.0);\ndifferenceOfGaussian.setUniform('radius1', 2.0);\n</code></pre>"},{"location":"dilate.html","title":"Dilate","text":"<p>Dilates the input image to increase light areas. Samples surrounding pixels and combines them to produce a dilated effect.</p>"},{"location":"dilate.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code></p>"},{"location":"dilate.html#example-parameters","title":"Example Parameters","text":"<pre><code>// None required\n</code></pre>"},{"location":"dithering.html","title":"Dithering","text":"<p>Applies dithering to an image, a technique commonly used to simulate additional colors and reduce banding in lower bit-depth images.</p>"},{"location":"dithering.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>threshold</code> Float: Threshold to determine if pixel will be set to white or black. Default: <code>0.0</code> <code>dotSize</code> Float: The size of each dot in the display. Default: <code>0.0</code></p>"},{"location":"dithering.html#example-parameters","title":"Example Parameters","text":"<pre><code>dithering.setUniform('threshold', 0.3);\ndithering.setUniform('dotSize', 0.00001);\n</code></pre>"},{"location":"dot.html","title":"Dot","text":"<p>Emulates a seven-segment display by grouping pixels into dots.</p>"},{"location":"dot.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>dotSize</code> Float: The size of each dot in the display. Default: <code>0.0</code></p>"},{"location":"dot.html#example-parameters","title":"Example Parameters","text":"<pre><code>dot.setUniform('dotSize', 0.008);\n</code></pre>"},{"location":"duoTone.html","title":"Duotone","text":"<p>Applies a two-tone color effect.</p>"},{"location":"duoTone.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>tone1</code> Vec2: The RGB values of the first tone. Default: <code>(0.0, 0.0, 0.0)</code> <code>tone2</code> Vec2: The RGB values of the second tone. Default: <code>(0.0, 0.0, 0.0)</code></p>"},{"location":"duoTone.html#example-parameters","title":"Example Parameters","text":"<pre><code>duoTone.setUniform('tone1', [0.8627, 0.6275, 0.0]);\nduoTone.setUniform('tone2', [0.4157, 0.0118, 0.5647]);\n</code></pre>"},{"location":"edgePreservingSmooth.html","title":"Edge Preserving Smooth","text":"<p>Applies an edge-preserving filter to the input texture, emphasizing edges while smoothing other areas.</p>"},{"location":"edgePreservingSmooth.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>threshold</code> Float: The threshold value that determines whether to preserve the original pixel color or use the local average. Default: <code>0.0</code></p>"},{"location":"edgePreservingSmooth.html#example-parameters","title":"Example Parameters","text":"<pre><code>edgePreservingSmooth.setUniform('threshold', 0.2);\n</code></pre>"},{"location":"emboss.html","title":"Emboss","text":"<p>Applies an emboss effect to the input texture, creating a 3D appearance. This is achieved by calculating the gradient of the pixel values and normalizing the result.</p>"},{"location":"emboss.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code></p>"},{"location":"emboss.html#example-parameters","title":"Example Parameters","text":"<pre><code>// None required\n</code></pre>"},{"location":"erosion.html","title":"Erosion","text":"<p>Computes the minimum pixel value within a local neighborhood. The structuring element is a square kernel centered at each pixel.</p>"},{"location":"erosion.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code></p>"},{"location":"erosion.html#example-parameters","title":"Example Parameters","text":"<pre><code>// None required\n</code></pre>"},{"location":"flip.html","title":"Flip","text":"<p>Flips the input texture horizontally and/or vertically based on specified parameters.</p>"},{"location":"flip.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>flipHorizontal</code> Boolean:  If <code>true</code>, flips the texture horizontally. Default: <code>false</code> <code>flipVertical</code> Boolean:  If <code>true</code>, flips the texture vertically. Default: <code>false</code></p>"},{"location":"flip.html#example-parameters","title":"Example Parameters","text":"<pre><code>flip.setUniform(\"flipHorizontal\", true);\nflip.setUniform(\"flipVertical\", false);\n</code></pre>"},{"location":"gamma.html","title":"Gamma","text":"<p>Applies gamma correction to the input texture color.</p>"},{"location":"gamma.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>gamma</code> Float:  Gamma value for correction. Default: <code>0.0</code></p>"},{"location":"gamma.html#example-parameters","title":"Example Parameters","text":"<pre><code>gamma.setUniform('gamma', 2.2);\n</code></pre>"},{"location":"gaussianBlur.html","title":"Gaussian Blur","text":"<p>Applies a Gaussian blur to the input texture.</p>"},{"location":"gaussianBlur.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>uTextureSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>(0.0, 0.0)</code> <code>blurRadius</code> Float: The size of the blur. Default: <code>0.0</code></p>"},{"location":"gaussianBlur.html#example-parameters","title":"Example Parameters","text":"<pre><code>gaussianBlur.setUniform('blurRadius', 5.0);\n</code></pre>"},{"location":"glitch.html","title":"Glitch","text":"<p>The RGB channels are separated and displaced, then the original and glitched colors are mixed.</p>"},{"location":"glitch.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>glitchIntensity</code> Float:  Value to determine the intensity of the glitch effect. Default: <code>0.0</code></p>"},{"location":"glitch.html#example","title":"Example","text":"<pre><code>let bird, glitch;\n\nfunction setup() {\n  createCanvas(600, 600, WEBGL); // Use WEBGL mode to use the shader\n  glitch = createFilterShader(fip.glitch); // Load the glitch shader\n  bird = loadImage(\"bird.jpg\");\n}\n\nfunction draw() {\n  background(0);\n  imageMode(CENTER);\n  image(bird, 0, 0, width, height);\n\n  // Apply the shader\n  filter(glitch);\n\n  // Set the shader uniforms\n  glitch.setUniform('glitchIntensity', 0.8); // Set the intensity of the glitch effect\n}\n</code></pre>"},{"location":"grayscale.html","title":"Grayscale","text":"<p>Converts the input texture to grayscale using the luminance method, which is a weighted sum of the color channels.</p>"},{"location":"grayscale.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code></p>"},{"location":"grayscale.html#example-parameters","title":"Example Parameters","text":"<pre><code>// None required\n</code></pre>"},{"location":"halftone.html","title":"Halftone","text":"<p>Applies a halftone effect by converting texture coordinates to screen space, defining cells based on the specified size, and calculating dots within each cell.</p>"},{"location":"halftone.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>cellSize</code> Float: The size of each halftone cell. Default: <code>0.0</code> <code>threshold</code> Float: The threshold value for dot creation. A higher value results in fewer dots. Default: <code>0.0</code></p>"},{"location":"halftone.html#example-parameters","title":"Example Parameters","text":"<pre><code>halftone.setUniform('cellSize', 4.0);\nhalftone.setUniform('threshold', 0.2);\n</code></pre>"},{"location":"installation.html","title":"Installation","text":"<p>To use FIP you can include it in your index.html file: <pre><code>    &lt;head&gt;\n    &lt;!-- ...--&gt;\n    &lt;script src=\"https://prontopablo.github.io/p5.FIP/assets/javascripts/p5.FIP.js\"&gt;&lt;/script&gt;\n    &lt;!-- ...--&gt;\n    &lt;/head&gt;\n</code></pre></p> <p>Alternatively you can download the p5.FIP.js file from releases and bring it into your project files: <pre><code>    &lt;head&gt;\n    &lt;!-- ...--&gt;\n    &lt;script src=\"p5.FIP.js\"&gt;&lt;/script&gt;\n    &lt;!-- ...--&gt;\n    &lt;/head&gt;\n</code></pre></p>"},{"location":"invertColors.html","title":"Invert Colors","text":"<p>Inverts the colors of a texture.</p>"},{"location":"invertColors.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code></p>"},{"location":"invertColors.html#example-parameters","title":"Example Parameters","text":"<pre><code>// None required\n</code></pre>"},{"location":"issues.html","title":"Issues","text":"<p>Below are some common issues people have when using p5.FIP and how to resolve them. If your issue is not listed below, please report it here and I'll try to help you or fix it.</p>"},{"location":"issues.html#out-of-date-graphics-drivers","title":"Out of date graphics drivers","text":"<p>As p5.FIP runs GLSL shaders on the GPU, make sure you update to the latest graphics drivers for your GPU (how?), otherwise you may see some visual glitches.</p>"},{"location":"issues.html#not-passing-textures","title":"Not passing textures","text":"<p>Some shaders have required parameters and will not work if these parameters are not passed into them. Below we use the blend shader but fail to pass it the textures we want to blend, so it does nothing.</p> <pre><code>let layer1, layer2, ireland, bird, blend, blendingModeIndex = 0;\n\nfunction setup() {\n    createCanvas(600, 600, WEBGL);\n\n    blend = createFilterShader(fip.blend);\n\n    ireland = loadImage(\"ireland.jpg\");\n    bird = loadImage(\"bird.jpg\");\n\n    layer1 = createFramebuffer();\n    layer2 = createFramebuffer();\n\n    console.log(\"Press any key to cycle through blending modes.\");\n}\n\nfunction draw() {\n    background(0);\n    imageMode(CENTER);\n\n    layer1.begin();\n    image(ireland, 0, 0, width, height);\n    layer1.end();\n\n    layer2.begin();\n    image(bird, 0, 0, width, height);\n    layer2.end();\n\n    filter(blend);\n\n    // We must send our two textures to the shader for blend to work!\n    // blend.setUniform('texture1', layer1.color);\n    // blend.setUniform('texture2', layer2.color);\n    blend.setUniform(\"uTextureSize\", [width, height]);\n    blend.setUniform('mixFactor', 0.5);\n    blend.setUniform('blendingMode', blendingModeIndex);\n}\n\nfunction keyPressed() {\n    blendingModeIndex = (blendingModeIndex + 1) % 14;\n    console.log(\"Blending Mode: \" + blendingModeIndex);\n}\n</code></pre> Required parameters not set, shader does nothing  Image when textures are passed"},{"location":"kuwahara.html","title":"Kuwahara","text":"<p>Local image processing technique used for noise reduction and edge preservation. It divides the image into quadrants, calculates the mean and variance of color values in each quadrant, and selects the quadrant with the minimum color variance. This results in a smoothed version of the original image.</p>"},{"location":"kuwahara.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code></p>"},{"location":"kuwahara.html#example-parameters","title":"Example Parameters","text":"<pre><code>// None required\n</code></pre>"},{"location":"laplacianEdgeEnhancement.html","title":"Laplacian Edge Enhancement","text":"<p>Enhances image details by emphasizing edges through Laplacian filtering.</p>"},{"location":"laplacianEdgeEnhancement.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>amount</code> Float: Controls the strength of the enhancement. Higher values result in more pronounced edges. Default: <code>0.0</code></p>"},{"location":"laplacianEdgeEnhancement.html#example-parameters","title":"Example Parameters","text":"<pre><code>laplacianEdgeEnhancement.setUniform('amount', 5.5);\n</code></pre>"},{"location":"linocut.html","title":"Linocut","text":"<p>Simulates a linocut effect by converting the input image to grayscale and applying a threshold to distinguish between ink and paper regions.  </p>"},{"location":"linocut.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>threshold</code> Float: The threshold value to determine the cutoff between ink and paper colors. Values above the threshold represent ink, while values below represent paper. Default: <code>0.0</code> <code>inkColor</code> Vec3: The color of the ink. This is a RGB vector, where each component is in the range [0, 1]. Default: <code>(0.0, 0.0, 0.0)</code> <code>paperColor</code> Vec3: The color of the paper. This is a RGB vector, where each component is in the range [0, 1]. Default: <code>(0.0, 0.0, 0.0)</code></p>"},{"location":"linocut.html#example-parameters","title":"Example Parameters","text":"<pre><code>linocut.setUniform('threshold', 0.4);\nlinocut.setUniform('inkColor', [0.4, 0.4, 1.0]);\nlinocut.setUniform('paperColor', [1.0, 1.0, 1.0]);\n</code></pre>"},{"location":"mosaic.html","title":"Mosaic","text":"<p>Applies a mosaic effect to an input texture.</p>"},{"location":"mosaic.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>mosaicSize</code> Float: Size of the mosaic cells. A higher value results in larger mosaic cells. Default: <code>0.0</code></p>"},{"location":"mosaic.html#example-parameters","title":"Example Parameters","text":"<pre><code>mosaic.setUniform('mosaicSize', 12.0);\n</code></pre>"},{"location":"motionBlur.html","title":"Motion Blur","text":"<p>Blurs an image by simulating motion in a specified direction.</p>"},{"location":"motionBlur.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code></p>"},{"location":"motionBlur.html#example-parameters","title":"Example Parameters","text":"<pre><code>// None required\n</code></pre>"},{"location":"pixelate.html","title":"Pixelate","text":"<p>Pixelates an image by rounding each pixel to a fixed grid based on the specified pixel size.</p>"},{"location":"pixelate.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>pixelSize</code> Float: The size of each pixel in the pixel grid. Default: <code>0.0</code></p>"},{"location":"pixelate.html#example-parameters","title":"Example Parameters","text":"<pre><code>pixelate.setUniform('pixelSize', 0.01);\n</code></pre>"},{"location":"quantization.html","title":"Quantization","text":"<p>Reduces the number of colors in an image through quantization.</p>"},{"location":"quantization.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>shades</code> Int: Number of shades to quantize the colors to. Default: <code>0.0</code></p>"},{"location":"quantization.html#example-parameters","title":"Example Parameters","text":"<pre><code>quantization.setUniform('shades', 4.0);\n</code></pre>"},{"location":"resources.html","title":"List of Resources","text":"<p>As I've developed p5.FIP I've realised there is a lack of documentation for p5.js and Processing shaders. Below is a list of useful resources grouped by category.</p>"},{"location":"resources.html#learning-about-p5js-processing-shaders","title":"Learning about p5.js / Processing shaders","text":"<ul> <li> <p>If you're writing shaders for Processing, I would highly recommend this archived tutorial. </p> </li> <li> <p>Learn about createFilterShader.</p> </li> <li> <p>The replies to this Reddit post list various resources and examples.</p> </li> <li> <p>This Stack Overflow thread goes over some troubleshooting.</p> </li> <li> <p>What's the difference between shader() and filter()?</p> </li> </ul>"},{"location":"resources.html#processing-vs-p5js-shaders","title":"Processing vs. p5.js shaders","text":"<ul> <li> <p>Processing uses \"full OpenGL\" but uses the specifications of OpenGL ES. </p> </li> <li> <p>p5.js uses WebGL which is a JavaScript API based on GL_ES. WebGL is specifically designed to work within web browsers and is a subset of the full OpenGL specification. The GL_ES (OpenGL ES) variant is suitable for embedded systems, such as mobile devices, and is commonly used in web development.</p> </li> </ul>"},{"location":"resources.html#other-processing-shader-projects","title":"Other Processing shader projects","text":"<ul> <li>Processing Shader Examples</li> <li>PixelFlow</li> <li>Compute Shader</li> <li>Processing Image Processing</li> <li>Filters4Processing</li> <li>Lygia</li> </ul>"},{"location":"ripple.html","title":"Ripple","text":"<p>Creates a ripple effect using sine function.</p>"},{"location":"ripple.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>rippleFrequency</code> Float: The frequency of the ripples. Default: <code>0.0</code> <code>rippleAmplitude</code> Float: The amplitude or strength of the ripples. Default: <code>0.0</code></p>"},{"location":"ripple.html#example-parameters","title":"Example Parameters","text":"<pre><code>ripple.setUniform('rippleFrequency', 50.0);\nripple.setUniform('rippleAmplitude', 0.01);\n</code></pre>"},{"location":"rotate.html","title":"Rotate","text":"<p>Rotates an input texture based on a specified rotation angle in degrees. It ensures that the resulting rotated coordinates are within the texture bounds. If the rotated coordinates fall outside the bounds, the pixel becomes transparent. </p>"},{"location":"rotate.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>rotationAngle</code> Float: Rotation angle in degrees. Default: <code>0.0</code></p>"},{"location":"rotate.html#example-parameters","title":"Example Parameters","text":"<pre><code>rotate.setUniform(\"rotationAngle\", -95);\n</code></pre>"},{"location":"saturation.html","title":"Saturation","text":"<p>Adjusts the saturation of an input texture. It operates by converting the original color to grayscale (luminance) and then interpolating between the grayscale version and the original color based on the saturation parameter.</p>"},{"location":"saturation.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>saturation</code> Float: Controls the saturation of the image. A value of 0.0 results in a grayscale image, while higher values increase saturation. Default: <code>0.0</code></p>"},{"location":"saturation.html#example-parameters","title":"Example Parameters","text":"<pre><code>saturation.setUniform('saturation', 5.5);\n</code></pre>"},{"location":"sepia.html","title":"Sepia","text":"<p>Converts the input image to a sepia-toned version using a specific color transformation.</p>"},{"location":"sepia.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code></p>"},{"location":"sepia.html#example-parameters","title":"Example Parameters","text":"<pre><code>// None required\n</code></pre>"},{"location":"settingParameters.html","title":"Setting Parameters","text":"<p>Each effect has parameters that you can edit using .setUniform(). The reference page for each effect lists the parameters and what they do.</p> <p>The example below sets the glitch intensity of the glitch shader to a value of 0.8. <pre><code>let bird, glitch;\n\nfunction setup() {\n    createCanvas(600, 600, WEBGL); // Use WEBGL mode to use the shader\n    glitch = createFilterShader(fip.glitch); // Load the glitch shader\n    bird = loadImage(\"bird.jpg\");\n}\n\nfunction draw() {\n    background(0);\n\n    // Draw our scene\n    imageMode(CENTER);\n    image(bird, 0, 0, width, height);\n\n    filter(glitch); // Apply the shader\n\n    glitch.setUniform('glitchIntensity', 0.8); // Set the intensity of the glitch effect\n}\n</code></pre></p>"},{"location":"sharpen.html","title":"Sharpen","text":"<p>Applies a sharpening effect to the input texture using a convolution kernel. It calculates the sharpened color of each pixel by enhancing the details in the center pixel and subtracting a fraction of the neighboring pixels.</p>"},{"location":"sharpen.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>sharpness</code> Float: The intensity of the sharpening effect.  Default: <code>0.0</code></p>"},{"location":"sharpen.html#example-parameters","title":"Example Parameters","text":"<pre><code>sharpen.setUniform('sharpness', 1.5);\n</code></pre>"},{"location":"sketch.html","title":"Sketch","text":"<p>Applies the Sobel operator for edge detection, creating an ink-like effect on an input texture.</p>"},{"location":"sketch.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>threshold</code> Float: The threshold for edge intensity. Values above this threshold will be considered edges, creating the ink-like effect. Default: <code>0.0</code></p>"},{"location":"sketch.html#example-parameters","title":"Example Parameters","text":"<pre><code>sketch.setUniform('threshold', 0.2);\n</code></pre>"},{"location":"sobelEdgeDetection.html","title":"Sobel Edge Detection","text":"<p>Performs edge detection on the input texture using the Sobel operator. It calculates the intensity gradients in the horizontal and vertical directions and combines them to detect edges. </p>"},{"location":"sobelEdgeDetection.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>threshold</code> Float: The threshold value to determine the intensity at which edges are detected. Default: <code>0.0</code></p>"},{"location":"sobelEdgeDetection.html#example-parameters","title":"Example Parameters","text":"<pre><code>sobelEdgeDetection.setUniform('threshold', 0.2);\n</code></pre>"},{"location":"solarize.html","title":"Solarize","text":"<p>Inverts colors based on the intensity of pixel colors. If the average intensity of a pixel's color is above a specified threshold, the colors are inverted, creating a solarization effect.</p>"},{"location":"solarize.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>threshold</code> Float: The intensity threshold above which colors will be inverted. Ranges from 0.0 to 1.0. Default: <code>0.0</code></p>"},{"location":"solarize.html#example-parameters","title":"Example Parameters","text":"<pre><code>solarize.setUniform('threshold', 0.5);\n</code></pre>"},{"location":"static.html","title":"Static","text":"<p>Combines Sobel operator for edge detection and stippling. The Sobel operator calculates the intensity gradient of the image, and the stippling effect adds random dots to the edges, creating an TV static appearance.</p>"},{"location":"static.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>threshold</code> Float: The threshold for edge detection. Pixels with intensity above this threshold will be treated as edges. Default: <code>0.0</code> <code>stippleDensity</code> Float: The density of stippling dots to be added to the ink effect. A lower value results in more dots. Default: <code>0.0</code></p>"},{"location":"static.html#example-parameters","title":"Example Parameters","text":"<pre><code>static.setUniform('threshold', 0.2);\nstatic.setUniform('stippleDensity', 0.99);\n</code></pre>"},{"location":"threshold.html","title":"Threshold","text":"<p>Applies a threshold to a texture, converting it to a binary black and white image based on a specified threshold value.</p>"},{"location":"threshold.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>threshold</code> Float: The threshold value that determines the cutoff point. Pixels with grayscale values above this threshold will be set to white, and those below will be set to black. Default: <code>0.0</code></p>"},{"location":"threshold.html#example-parameters","title":"Example Parameters","text":"<pre><code>threshold.setUniform('threshold', 0.5);\n</code></pre>"},{"location":"unsharpMasking.html","title":"Unsharp Masking","text":"<p>Performs unsharp masking to enhance image sharpness. Unsharp masking involves subtracting a blurred version of the image from the original and then adding the result back to the original image. </p>"},{"location":"unsharpMasking.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>strength</code> Float: The strength of the unsharp masking effect. A higher value increases the sharpening effect. Default: <code>0.0</code></p>"},{"location":"unsharpMasking.html#example-parameters","title":"Example Parameters","text":"<pre><code>unsharpMasking.setUniform('strength', 2.0);\n</code></pre>"},{"location":"usage.html","title":"Usage","text":"<p>Once p5.FIP has been included in your index.html file, to use an effect: </p> <ol> <li>In <code>createCanvas()</code>, use the WEBGL renderer (Why?).</li> <li>Load the shader you want, using <code>createFilterShader()</code>.</li> <li>Call <code>filter()</code>, passing in the shader name.</li> <li>Set uniforms (parameters).</li> </ol> <pre><code>let ireland, glitch;\n\nfunction setup() {\n    createCanvas(600, 600, WEBGL); // Use WEBGL mode to use the shader\n    glitch = createFilterShader(fip.glitch); // Load the glitch shader\n    ireland = loadImage(\"ireland.jpg\");\n}\n\nfunction draw() {\n  background(0);\n  imageMode(CENTER);\n  image(bird, 0, 0, width, height);\n\n  // Apply the shader\n  filter(glitch);\n\n  // Set the shader uniforms\n  glitch.setUniform('glitchIntensity', 0.8); // Set the intensity of the glitch\n}\n</code></pre> Image with no effects Image with glitch effect applied"},{"location":"vignette.html","title":"Vignette","text":"<p>Adds a vignette effect to the texture.</p>"},{"location":"vignette.html#parameters","title":"Parameters","text":"<p><code>tex0</code> Texture: The input texture to be filtered. Default: <code>The entire canvas</code> <code>canvasSize</code> Vec2: The size of the texture used for sampling neighboring pixels. Default: <code>The entire canvas</code> <code>vignetteStrength</code> Float: Strength of the vignette effect. Range: 0.0 (none) to 1.0 (maximum). Default: <code>0.0</code> <code>vignetteFalloff</code> Float: Rate at which the vignette diminishes. Default: <code>0.0</code> <code>vignetteSign</code> Float: Direction of the vignette effect. -1.0 (inward) or 1.0 (outward). Default: <code>0.0</code> <code>vignetteSize</code> Float: Overall size of the vignette effect. Default: <code>0.0</code></p>"},{"location":"vignette.html#example-parameters","title":"Example Parameters","text":"<pre><code>vignette.setUniform('vignetteStrength', 0.3);    \nvignette.setUniform('vignetteFalloff', 1.0);\nvignette.setUniform('vignetteSign', 1.0);\nvignette.setUniform('vignetteSize', 1.0);\n</code></pre>"}]}